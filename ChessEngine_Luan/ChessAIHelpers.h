#pragma once

#include "ChessStructs.h"
#include <vector>

struct Node {

	Node(const Move& _move = {}, Node* _parent = nullptr, const GameState& _gameState = {}) : move{ _move }, parent{ _parent }, gameState{ _gameState } {}
	~Node()
	{
		parent = nullptr;
		for (auto node : children)
		{
			delete node;
		}
	}

	Move move;
	int visits{};
	float totalScore{};
	std::vector<Node*> children{};
	Node* parent{};

	GameState gameState{};
};

// Credit to ToTheAnd (aka. toanth) (in: Sebastian Lague's Chess Programming Tournament)
struct PieceSquareTables
{
	const std::vector<short> pawnStartBlack{0	 , 0  , 0  , 0	, 0  , 0  , 0  , 0  ,
									  151, 183, 152, 203, 177, 199, 91 , 57 ,
									  64 , 88 , 117, 124, 132, 148, 135, 88 ,
									  54 , 80 , 84 , 87 , 110, 100, 113, 84 , 
									  41 , 73 , 69 , 90 , 92 , 81 , 104, 67 ,
									  41 , 69 , 70 , 67 , 87 , 75 , 117, 81 ,
									  43 , 73 , 66 , 56 , 79 , 100, 140, 82 ,
									  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0  
	};
	const std::vector<short> pawnEndBlack{ 0  , 0  , 0  , 0  , 0  , 0  , 0  , 0  ,
									  145, 145, 135, 141, 139, 133, 132, 121,
									  138, 138, 119, 130, 123, 122, 130, 121,
									  146, 140, 121, 114, 111, 115, 127, 124,
									  172, 157, 136, 122, 112, 118, 137, 142,
									  251, 254, 219, 193, 180, 169, 218, 219,
									  321, 311, 306, 248, 241, 258, 320, 327,
									  0  , 0  , 0  , 0  , 0  , 0  , 0  , 0
	};

	const std::vector<short> knightStartBlack{224, 224, 300, 284, 366, 235, 243, 249,
										292, 328, 386, 369, 389, 436, 346, 354,
										337, 374, 380, 404, 439, 479, 396, 386,
										322, 335, 360, 389, 361, 394, 340, 360,
										307, 326, 339, 338, 350, 346, 351, 316,
										288, 310, 327, 328, 342, 329, 333, 301,
										281, 284, 306, 317, 317 ,321, 313, 312,
										228, 291, 269, 287, 289, 305, 289, 256
		};
	const std::vector<short> knightEndBlack{ 284, 333, 348, 349, 341, 337, 345, 250,
									   340, 355, 353, 363, 351, 336, 345, 320,
									   346, 359, 381, 379, 358, 353, 349, 330,
									   359, 386, 394, 399, 399, 390, 380, 350,
									   362, 373, 398, 401, 403, 391, 374, 359,
									   344, 366, 377, 394, 392, 371, 362, 346,
									   334, 357, 365, 368, 366, 367, 353, 347,
									   329, 310, 349, 355, 352, 350, 314, 318
		};

	const std::vector<short> bishopStartBlack{340, 315, 310, 280, 283, 305, 372, 317,
											  345, 380, 356, 345, 367, 413, 370, 375,
											  357, 385, 402, 409, 408, 432, 422, 377,
											  344, 359, 387, 405, 394, 391, 357, 355,
											  340, 354, 362, 383, 385, 360, 362, 341,
											  353, 363, 360, 363, 363, 362, 358, 370,
											  356, 358, 368, 345, 354, 372, 385, 359,
											  326, 350, 337, 332, 333, 329, 349, 345,
	};
	const std::vector<short> bishopEndBlack{	370, 386, 383, 395, 393, 383, 372, 370,
										360, 380, 387, 389, 385, 371, 387, 361,
										391, 380, 392, 383, 386, 390, 375, 385,
										385, 406, 395, 409, 403, 396, 401, 383,
										381, 397, 410, 400, 400, 404, 395, 373,
										379, 391, 398, 398, 404, 398, 384, 373,
										374, 371, 375, 390, 395, 381, 383, 357, 
										356, 376, 354, 383, 379, 382, 362, 348
	};

	const std::vector<short> rookStartBlack{ 531, 535, 545, 551, 576, 596, 608, 610,
									   480, 471, 498, 520, 501, 533, 534, 583, 
									   457, 475, 477, 492, 515, 522, 580, 518,
									   431, 446, 454, 473, 474, 476, 480, 472,
									   408, 413, 425, 443, 447, 431, 450, 424,
									   399, 417, 423, 429, 437, 435, 468, 438,
									   398, 416, 431, 434, 439, 445, 462, 405,
									   416, 421, 432, 454, 451, 443, 433, 398
	};
	const std::vector<short> rookEndBlack{677, 683, 691, 688, 680, 672, 666, 662,
									680, 700, 698, 689, 690, 684, 677, 652,
									685, 688, 688, 685, 673, 665, 655, 656,
									689, 686, 694, 688, 675, 668, 665, 661,
									684, 688, 691, 686, 684, 683, 670, 670,
									679, 677, 677, 681, 679, 670, 651, 654,
									673, 674, 677, 680, 671, 667, 653, 664,
									666, 679, 686, 683, 677, 673, 669, 650
				};

	const std::vector<short> queenStartBlack{	906, 942, 982, 1006, 1014, 1044, 1033, 981,
										917, 895, 902, 891, 894, 971, 936, 1029,
										920, 917, 924, 935, 949, 981, 1002, 974,
										905, 906, 909, 911, 916, 928, 931, 936,
										901, 906, 903, 910, 911, 914, 921, 925,
										902, 913, 905, 908, 910, 912, 929, 922,
										901, 908, 919, 925, 919, 933, 943, 957,
										897, 997, 900, 914, 903, 891, 887, 875,
	};
	const std::vector<short> queenEndBlack{	1292, 1292, 1303, 1295, 1284, 1282, 1265, 1291,
										1265, 1308, 1343, 1364, 1375, 1339, 1363, 1286,
										1274, 1292, 1326, 1330, 1353, 1327, 1276, 1286,
										1280, 1306, 1322, 1341, 1359, 1336, 1329, 1309,
										1278, 1307, 1313, 1335, 1331, 1319, 1310, 1297,
										1271, 1269, 1306, 1297, 1306, 1306, 1282, 1269,
										1266, 1267, 1255, 1264, 1275, 1247, 1218, 1175,
										1259, 1257, 1259, 1248, 1266, 1266, 1237, 1225
	};

	const std::vector<short> kingStartBlack{	1535, 1535, 1535, 1535, 1535, 1535, 1535, 1535,
												1535, 1535, 1535, 1535, 1535, 1535, 1535, 1535,
												1535, 1535, 1535, 1535, 1535, 1535, 1535, 1535,
												1530, 1530, 1530, 1530, 1530, 1530, 1530, 1530,
												1480, 1480, 1480, 1480, 1480, 1480, 1480, 1480,
												1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380,
												1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330,
												1280, 1280, 1280, 1280, 1285, 1280, 1280, 1280,
	};
	const std::vector<short> kingEndBlack{		1954, 2004, 2011, 2047, 2035, 2042, 2038, 1962,
												2038, 2064, 2073, 2061, 2076, 2087, 2086, 2059, 
												2052, 2069, 2087, 2094, 2096, 2091, 2092, 2067,
												2042, 2075, 2091, 2104, 2104, 2100, 2092, 2070,
												2030, 2062, 2086, 2102, 2102, 2091, 2078, 2062, 
												2024, 2048, 2070, 2082, 2083, 2075, 2056, 2043,
												2005, 2033, 2047, 2059, 2062, 2052, 2033, 2014, 
												1974, 1990, 2010, 2030, 2003, 2028, 2000, 1971
	};
};
